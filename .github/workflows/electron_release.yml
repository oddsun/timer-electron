# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build Electron App

on:
  push:
    tags:
      - "v*" # matches v1.0.1, v1.2, v2, etc

jobs:
  once:
    name: Create GitHub release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
  build:
    name: Create cross-platform release builds, tag and upload binaries
    needs: once
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js v16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          # node version 17/18 gives openssh security error
          # cache: 'npm'  # cache is not working
      - name: Install dependencies
        run: npm ci
      - name: Build Project
        run: npm run electron:build
      - name: Upload Release Asset
        if: runner.os == 'Windows'
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: "./dist_electron/timer-electron-win-${{ github.ref_name }}.exe"
          asset_name: timer-electron-win-setup-${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Asset
        if: runner.os == 'macOS'
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: "./dist_electron/timer-electron-mac-${{ github.ref_name }}.dmg"
          asset_name: timer-electron-mac-${{ github.ref_name }}.dmg
          asset_content_type: application/octet-stream
      - name: Upload Release Asset
        if: runner.os == 'Linux'
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: "./dist_electron/timer-electron-linux-${{ github.ref_name }}.deb"
          asset_name: timer-electron-ubuntu-${{ github.ref_name }}.deb
          asset_content_type: application/octet-stream
